User interactivity:
* Tabbed interface:
    Content
    Customize
* Populate example resume
* Clear resume
* Live preview all input fields
* Button to download resume as PDF

To Do:
* Make this list!
* Get used to writing components and importing them into App.jsx
    * Create a component in / components and import it and display it
    * Create two divs - one containing a sample input, one updating Live
* Create a personal details section
* Create an education section
    * Include a button to add education
        * on click, update this section with a form
            * The form should have buttons to delete, cancel, and save
* Create an Experience section
* Create a leadership and activities section
* Create a skills and interests section


{"personalDetails":{"fullName":"Harry Potter","email":"hedwig@owlmail.com","phoneNumber":"(414)-232-9992","address":"The Cupboard Under the Stairs, 4 Privet Drive, Little Whinging, Surrey"},"education":[{"school":"Hogwarts School of Witchcraft and Wizardry","degree":"Wizard in Good Standing","startDate":1991,"endDate":1998,"location":"Scotland"},{"school":"Discount Dave's Higher Learning","degree":"Bachelor of Science in Kicking Ass","startDate":2021,"endDate":2023,"location":"Bevery Hills"}],"experience":[],"activities":[],"skills":[]}

* Modify cancel button so that it reverts changes
    * Use a new state to hold changes in buffer
    * Commit those changes if a new form is initialized
* Implement a delete button
* Remove save button


        <PersonalDetails
          resume={resume}
          handleDetailsInput={handleDetailsInput}
          category={"personalDetails"}
        />
        <Education
          resume={resume}
          handleInput={handleInput}
          deleteEntry={deleteEntry}
          category={"education"}
        />
        <Experience
          resume={resume}
          handleInput={handleInput}
          deleteEntry={deleteEntry}
          category={"experience"}
        />
        <Activities
          resume={resume}
          handleInput={handleInput}
          deleteEntry={deleteEntry}
          category={"activities"}
        />
        <Skills
          resume={resume}
          handleSkillsSubmit={handleSkillsSubmit}
          handleDeleteTag={handleDeleteTag}
        />

  When you arrive at the form, it'll show current entries
  If you start typing, the done button and the add institution buttons will only appear after entering 
  a school/company/organization
  If you leave without entering a school/company/organization, you can come back and your previous values will still be there

  This means that form.jsx must set index to show to 

  The only way to increment indexToShow is with the addInstitution or Done buttons
  They will only appear if a school/org/company is given



  Here's the user's journey:
  They arrive at a form tab
  If a form was in progress - either a completed entry that was being edited, or a new entry - show that form
  Otherwise, show a new form

  When they start typing into a form,
  Create a new button in the entries column, whose label is either (...) or the school/company/org name

  When they've entered a school/company/org name, display a done button

  If they open a completed entry and delete the school/company/org name, then they don't have a done button and that form
  remains the one that's in progress
  

  To fix: in Form.jsx, use setresume to create a new obj at index if it doesn't exist
  Replace "description" field with a textbox and add a tip to use asterisks
  Implement logic to parse asterisks as new divs?
  Replace (...) with animated ellipses


  